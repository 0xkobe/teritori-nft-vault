/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BonusPerkMinterInterface extends ethers.utils.Interface {
  functions: {
    "bonusPerk()": FunctionFragment;
    "breed(uint256,uint256)": FunctionFragment;
    "breedConfig()": FunctionFragment;
    "breedList(uint256)": FunctionFragment;
    "breedRequestsCount()": FunctionFragment;
    "currentSupply()": FunctionFragment;
    "mint(uint256[])": FunctionFragment;
    "minter()": FunctionFragment;
    "mysteryBox()": FunctionFragment;
    "mysteryKey()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBreedConfig((uint256,uint256,address))": FunctionFragment;
    "setMinter(address)": FunctionFragment;
    "startBreed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "userBreedList(address)": FunctionFragment;
    "withdrawFund()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bonusPerk", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "breed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "breedConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "breedList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "breedRequestsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mysteryBox",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mysteryKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBreedConfig",
    values: [
      { startTime: BigNumberish; priceAmount: BigNumberish; currency: string }
    ]
  ): string;
  encodeFunctionData(functionFragment: "setMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startBreed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userBreedList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFund",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bonusPerk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "breed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "breedConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "breedList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "breedRequestsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mysteryBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mysteryKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBreedConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBreed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBreedList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFund",
    data: BytesLike
  ): Result;

  events: {
    "Breed(address,uint256,uint256)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawFund(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Breed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFund"): EventFragment;
}

export type BreedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    mysteryBoxTokenId: BigNumber;
    mysteryKeyTokenId: BigNumber;
  }
>;

export type MintEvent = TypedEvent<
  [string, BigNumber] & { user: string; bonusPerkTokenId: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WithdrawFundEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export class BonusPerkMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BonusPerkMinterInterface;

  functions: {
    bonusPerk(overrides?: CallOverrides): Promise<[string]>;

    breed(
      mysteryBoxTokenId: BigNumberish,
      mysteryKeyTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    breedConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        startTime: BigNumber;
        priceAmount: BigNumber;
        currency: string;
      }
    >;

    breedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        mysteryBoxTokenId: BigNumber;
        mysteryKeyTokenId: BigNumber;
        bonusPerkTokenId: BigNumber;
      }
    >;

    breedRequestsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    mysteryBox(overrides?: CallOverrides): Promise<[string]>;

    mysteryKey(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBreedConfig(
      newBreedConfig: {
        startTime: BigNumberish;
        priceAmount: BigNumberish;
        currency: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinter(
      newMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startBreed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userBreedList(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    withdrawFund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bonusPerk(overrides?: CallOverrides): Promise<string>;

  breed(
    mysteryBoxTokenId: BigNumberish,
    mysteryKeyTokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  breedConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      startTime: BigNumber;
      priceAmount: BigNumber;
      currency: string;
    }
  >;

  breedList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      mysteryBoxTokenId: BigNumber;
      mysteryKeyTokenId: BigNumber;
      bonusPerkTokenId: BigNumber;
    }
  >;

  breedRequestsCount(overrides?: CallOverrides): Promise<BigNumber>;

  currentSupply(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minter(overrides?: CallOverrides): Promise<string>;

  mysteryBox(overrides?: CallOverrides): Promise<string>;

  mysteryKey(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBreedConfig(
    newBreedConfig: {
      startTime: BigNumberish;
      priceAmount: BigNumberish;
      currency: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinter(
    newMinter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startBreed(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userBreedList(user: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  withdrawFund(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bonusPerk(overrides?: CallOverrides): Promise<string>;

    breed(
      mysteryBoxTokenId: BigNumberish,
      mysteryKeyTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    breedConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        startTime: BigNumber;
        priceAmount: BigNumber;
        currency: string;
      }
    >;

    breedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        mysteryBoxTokenId: BigNumber;
        mysteryKeyTokenId: BigNumber;
        bonusPerkTokenId: BigNumber;
      }
    >;

    breedRequestsCount(overrides?: CallOverrides): Promise<BigNumber>;

    currentSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(tokenIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    minter(overrides?: CallOverrides): Promise<string>;

    mysteryBox(overrides?: CallOverrides): Promise<string>;

    mysteryKey(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBreedConfig(
      newBreedConfig: {
        startTime: BigNumberish;
        priceAmount: BigNumberish;
        currency: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(newMinter: string, overrides?: CallOverrides): Promise<void>;

    startBreed(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userBreedList(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    withdrawFund(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Breed(address,uint256,uint256)"(
      user?: null,
      mysteryBoxTokenId?: null,
      mysteryKeyTokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        user: string;
        mysteryBoxTokenId: BigNumber;
        mysteryKeyTokenId: BigNumber;
      }
    >;

    Breed(
      user?: null,
      mysteryBoxTokenId?: null,
      mysteryKeyTokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        user: string;
        mysteryBoxTokenId: BigNumber;
        mysteryKeyTokenId: BigNumber;
      }
    >;

    "Mint(address,uint256)"(
      user?: null,
      bonusPerkTokenId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; bonusPerkTokenId: BigNumber }
    >;

    Mint(
      user?: null,
      bonusPerkTokenId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; bonusPerkTokenId: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "WithdrawFund(address,uint256)"(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    WithdrawFund(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    bonusPerk(overrides?: CallOverrides): Promise<BigNumber>;

    breed(
      mysteryBoxTokenId: BigNumberish,
      mysteryKeyTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    breedConfig(overrides?: CallOverrides): Promise<BigNumber>;

    breedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    breedRequestsCount(overrides?: CallOverrides): Promise<BigNumber>;

    currentSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    mysteryBox(overrides?: CallOverrides): Promise<BigNumber>;

    mysteryKey(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBreedConfig(
      newBreedConfig: {
        startTime: BigNumberish;
        priceAmount: BigNumberish;
        currency: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinter(
      newMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startBreed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userBreedList(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bonusPerk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    breed(
      mysteryBoxTokenId: BigNumberish,
      mysteryKeyTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    breedConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    breedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    breedRequestsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mysteryBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mysteryKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBreedConfig(
      newBreedConfig: {
        startTime: BigNumberish;
        priceAmount: BigNumberish;
        currency: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinter(
      newMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startBreed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userBreedList(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
