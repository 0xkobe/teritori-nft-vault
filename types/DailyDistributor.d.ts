/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DailyDistributorInterface extends ethers.utils.Interface {
  functions: {
    "batchClaim(uint256[],address[],uint256[],bytes32[][])": FunctionFragment;
    "claim(uint256,address,uint256,bytes32[])": FunctionFragment;
    "distributeDailyReward(uint256,bytes32)": FunctionFragment;
    "isDayReported(uint256)": FunctionFragment;
    "merkleRoots(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reporter()": FunctionFragment;
    "rescueFunds(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateReporter(address)": FunctionFragment;
    "userClaimedAmount(uint256,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchClaim",
    values: [BigNumberish[], string[], BigNumberish[], BytesLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeDailyReward",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDayReported",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reporter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rescueFunds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReporter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userClaimedAmount",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "batchClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeDailyReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDayReported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reporter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rescueFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userClaimedAmount",
    data: BytesLike
  ): Result;

  events: {
    "Claim(uint256,address,address,uint256)": EventFragment;
    "DailyReward(uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateReporter(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DailyReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateReporter"): EventFragment;
}

export type ClaimEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    day: BigNumber;
    user: string;
    token: string;
    amount: BigNumber;
  }
>;

export type DailyRewardEvent = TypedEvent<
  [BigNumber, string] & { day: BigNumber; merkleRoot: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UpdateReporterEvent = TypedEvent<[string] & { reporter: string }>;

export class DailyDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DailyDistributorInterface;

  functions: {
    batchClaim(
      dayArray: BigNumberish[],
      tokenArray: string[],
      allocationArray: BigNumberish[],
      proofsArray: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      day: BigNumberish,
      token: string,
      allocation: BigNumberish,
      proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeDailyReward(
      _day: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDayReported(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reporter(overrides?: CallOverrides): Promise<[string]>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateReporter(
      _reporter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userClaimedAmount(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  batchClaim(
    dayArray: BigNumberish[],
    tokenArray: string[],
    allocationArray: BigNumberish[],
    proofsArray: BytesLike[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    day: BigNumberish,
    token: string,
    allocation: BigNumberish,
    proofs: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeDailyReward(
    _day: BigNumberish,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDayReported(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleRoots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reporter(overrides?: CallOverrides): Promise<string>;

  rescueFunds(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateReporter(
    _reporter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userClaimedAmount(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    batchClaim(
      dayArray: BigNumberish[],
      tokenArray: string[],
      allocationArray: BigNumberish[],
      proofsArray: BytesLike[][],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      day: BigNumberish,
      token: string,
      allocation: BigNumberish,
      proofs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    distributeDailyReward(
      _day: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isDayReported(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleRoots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reporter(overrides?: CallOverrides): Promise<string>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReporter(_reporter: string, overrides?: CallOverrides): Promise<void>;

    userClaimedAmount(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Claim(uint256,address,address,uint256)"(
      day?: null,
      user?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { day: BigNumber; user: string; token: string; amount: BigNumber }
    >;

    Claim(
      day?: null,
      user?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { day: BigNumber; user: string; token: string; amount: BigNumber }
    >;

    "DailyReward(uint256,bytes32)"(
      day?: null,
      merkleRoot?: BytesLike | null
    ): TypedEventFilter<
      [BigNumber, string],
      { day: BigNumber; merkleRoot: string }
    >;

    DailyReward(
      day?: null,
      merkleRoot?: BytesLike | null
    ): TypedEventFilter<
      [BigNumber, string],
      { day: BigNumber; merkleRoot: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "UpdateReporter(address)"(
      reporter?: string | null
    ): TypedEventFilter<[string], { reporter: string }>;

    UpdateReporter(
      reporter?: string | null
    ): TypedEventFilter<[string], { reporter: string }>;
  };

  estimateGas: {
    batchClaim(
      dayArray: BigNumberish[],
      tokenArray: string[],
      allocationArray: BigNumberish[],
      proofsArray: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      day: BigNumberish,
      token: string,
      allocation: BigNumberish,
      proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeDailyReward(
      _day: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDayReported(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reporter(overrides?: CallOverrides): Promise<BigNumber>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateReporter(
      _reporter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userClaimedAmount(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchClaim(
      dayArray: BigNumberish[],
      tokenArray: string[],
      allocationArray: BigNumberish[],
      proofsArray: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      day: BigNumberish,
      token: string,
      allocation: BigNumberish,
      proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeDailyReward(
      _day: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDayReported(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reporter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateReporter(
      _reporter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userClaimedAmount(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
