/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BreedingInterface extends ethers.utils.Interface {
  functions: {
    "breed(uint256,uint256)": FunctionFragment;
    "breedConfig()": FunctionFragment;
    "breedList(uint256)": FunctionFragment;
    "childCollection()": FunctionFragment;
    "childCollectionConfig()": FunctionFragment;
    "mint(tuple[])": FunctionFragment;
    "mintWithMetadata(tuple[])": FunctionFragment;
    "minter()": FunctionFragment;
    "owner()": FunctionFragment;
    "parentCollection()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBreedConfig((uint256,uint256,uint256,uint256,address))": FunctionFragment;
    "setChildCollectionConfig((uint256,string))": FunctionFragment;
    "setMinter(address)": FunctionFragment;
    "startBreed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "userBreedList(address,uint256)": FunctionFragment;
    "withdrawFund()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "breed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "breedConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "breedList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "childCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "childCollectionConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyPercentage: BigNumberish;
        tokenUri: string;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithMetadata",
    values: [
      {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyPercentage: BigNumberish;
        tokenUri: string;
        extension: {
          name: string;
          description: string;
          image: string;
          external_url: string;
          animation_url: string;
          attributes: { trait_type: string; value: string }[];
        };
      }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parentCollection",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBreedConfig",
    values: [
      {
        startTime: BigNumberish;
        countLimit: BigNumberish;
        duration: BigNumberish;
        priceAmount: BigNumberish;
        currency: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildCollectionConfig",
    values: [{ maxSupply: BigNumberish; baseUrl: string }]
  ): string;
  encodeFunctionData(functionFragment: "setMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startBreed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userBreedList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFund",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "breed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "breedConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "breedList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "childCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childCollectionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBreedConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildCollectionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBreed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBreedList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFund",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawFund(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFund"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WithdrawFundEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export class Breeding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BreedingInterface;

  functions: {
    breed(
      tokenId1: BigNumberish,
      tokenId2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    breedConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        startTime: BigNumber;
        countLimit: BigNumber;
        duration: BigNumber;
        priceAmount: BigNumber;
        currency: string;
      }
    >;

    breedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        owner: string;
        parentTokenId1: BigNumber;
        parentTokenId2: BigNumber;
        childTokenId: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        withdrawn: boolean;
      }
    >;

    childCollection(overrides?: CallOverrides): Promise<[string]>;

    childCollectionConfig(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { maxSupply: BigNumber; baseUrl: string }>;

    mint(
      mintData: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyPercentage: BigNumberish;
        tokenUri: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithMetadata(
      mintData: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyPercentage: BigNumberish;
        tokenUri: string;
        extension: {
          name: string;
          description: string;
          image: string;
          external_url: string;
          animation_url: string;
          attributes: { trait_type: string; value: string }[];
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parentCollection(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBreedConfig(
      newBreedConfig: {
        startTime: BigNumberish;
        countLimit: BigNumberish;
        duration: BigNumberish;
        priceAmount: BigNumberish;
        currency: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChildCollectionConfig(
      newChildCollectionConfig: { maxSupply: BigNumberish; baseUrl: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinter(
      newMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startBreed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userBreedList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawFund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  breed(
    tokenId1: BigNumberish,
    tokenId2: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  breedConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      startTime: BigNumber;
      countLimit: BigNumber;
      duration: BigNumber;
      priceAmount: BigNumber;
      currency: string;
    }
  >;

  breedList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      owner: string;
      parentTokenId1: BigNumber;
      parentTokenId2: BigNumber;
      childTokenId: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      withdrawn: boolean;
    }
  >;

  childCollection(overrides?: CallOverrides): Promise<string>;

  childCollectionConfig(
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { maxSupply: BigNumber; baseUrl: string }>;

  mint(
    mintData: {
      tokenId: BigNumberish;
      royaltyReceiver: string;
      royaltyPercentage: BigNumberish;
      tokenUri: string;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithMetadata(
    mintData: {
      tokenId: BigNumberish;
      royaltyReceiver: string;
      royaltyPercentage: BigNumberish;
      tokenUri: string;
      extension: {
        name: string;
        description: string;
        image: string;
        external_url: string;
        animation_url: string;
        attributes: { trait_type: string; value: string }[];
      };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minter(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  parentCollection(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBreedConfig(
    newBreedConfig: {
      startTime: BigNumberish;
      countLimit: BigNumberish;
      duration: BigNumberish;
      priceAmount: BigNumberish;
      currency: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChildCollectionConfig(
    newChildCollectionConfig: { maxSupply: BigNumberish; baseUrl: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinter(
    newMinter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startBreed(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userBreedList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawFund(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    breed(
      tokenId1: BigNumberish,
      tokenId2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    breedConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        startTime: BigNumber;
        countLimit: BigNumber;
        duration: BigNumber;
        priceAmount: BigNumber;
        currency: string;
      }
    >;

    breedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        owner: string;
        parentTokenId1: BigNumber;
        parentTokenId2: BigNumber;
        childTokenId: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        withdrawn: boolean;
      }
    >;

    childCollection(overrides?: CallOverrides): Promise<string>;

    childCollectionConfig(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { maxSupply: BigNumber; baseUrl: string }>;

    mint(
      mintData: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyPercentage: BigNumberish;
        tokenUri: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithMetadata(
      mintData: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyPercentage: BigNumberish;
        tokenUri: string;
        extension: {
          name: string;
          description: string;
          image: string;
          external_url: string;
          animation_url: string;
          attributes: { trait_type: string; value: string }[];
        };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    minter(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    parentCollection(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBreedConfig(
      newBreedConfig: {
        startTime: BigNumberish;
        countLimit: BigNumberish;
        duration: BigNumberish;
        priceAmount: BigNumberish;
        currency: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setChildCollectionConfig(
      newChildCollectionConfig: { maxSupply: BigNumberish; baseUrl: string },
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(newMinter: string, overrides?: CallOverrides): Promise<void>;

    startBreed(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userBreedList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFund(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "WithdrawFund(address,uint256)"(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    WithdrawFund(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    breed(
      tokenId1: BigNumberish,
      tokenId2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    breedConfig(overrides?: CallOverrides): Promise<BigNumber>;

    breedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childCollection(overrides?: CallOverrides): Promise<BigNumber>;

    childCollectionConfig(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      mintData: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyPercentage: BigNumberish;
        tokenUri: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithMetadata(
      mintData: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyPercentage: BigNumberish;
        tokenUri: string;
        extension: {
          name: string;
          description: string;
          image: string;
          external_url: string;
          animation_url: string;
          attributes: { trait_type: string; value: string }[];
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parentCollection(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBreedConfig(
      newBreedConfig: {
        startTime: BigNumberish;
        countLimit: BigNumberish;
        duration: BigNumberish;
        priceAmount: BigNumberish;
        currency: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChildCollectionConfig(
      newChildCollectionConfig: { maxSupply: BigNumberish; baseUrl: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinter(
      newMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startBreed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userBreedList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    breed(
      tokenId1: BigNumberish,
      tokenId2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    breedConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    breedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childCollection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    childCollectionConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      mintData: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyPercentage: BigNumberish;
        tokenUri: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithMetadata(
      mintData: {
        tokenId: BigNumberish;
        royaltyReceiver: string;
        royaltyPercentage: BigNumberish;
        tokenUri: string;
        extension: {
          name: string;
          description: string;
          image: string;
          external_url: string;
          animation_url: string;
          attributes: { trait_type: string; value: string }[];
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parentCollection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBreedConfig(
      newBreedConfig: {
        startTime: BigNumberish;
        countLimit: BigNumberish;
        duration: BigNumberish;
        priceAmount: BigNumberish;
        currency: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChildCollectionConfig(
      newChildCollectionConfig: { maxSupply: BigNumberish; baseUrl: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinter(
      newMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startBreed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userBreedList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
