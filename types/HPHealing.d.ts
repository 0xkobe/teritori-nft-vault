/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HPHealingInterface extends ethers.utils.Interface {
  functions: {
    "BASE_POINT()": FunctionFragment;
    "HP()": FunctionFragment;
    "heal(address,uint256)": FunctionFragment;
    "healingPriceUnit()": FunctionFragment;
    "healingToken()": FunctionFragment;
    "healings(address,uint256)": FunctionFragment;
    "isSupportedCollection(address)": FunctionFragment;
    "nftMetadataRegistry()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "queryHealingPrice(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setHealingOption(address,uint256)": FunctionFragment;
    "setSupportedCollection(address,bool)": FunctionFragment;
    "supportedCollectionAt(uint256)": FunctionFragment;
    "supportedCollectionLength()": FunctionFragment;
    "supportedCollections(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASE_POINT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "HP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "heal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "healingPriceUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "healingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "healings",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftMetadataRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryHealingPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHealingOption",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedCollection",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedCollectionAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedCollectionLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedCollections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "BASE_POINT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "HP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "heal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "healingPriceUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "healings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftMetadataRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryHealingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHealingOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedCollectionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedCollectionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class HPHealing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HPHealingInterface;

  functions: {
    BASE_POINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    HP(overrides?: CallOverrides): Promise<[string]>;

    heal(
      collection: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    healingPriceUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    healingToken(overrides?: CallOverrides): Promise<[string]>;

    healings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber] & {
        withdrawn: boolean;
        collection: string;
        tokenId: BigNumber;
        endTimestamp: BigNumber;
      }
    >;

    isSupportedCollection(
      nft: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nftMetadataRegistry(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queryHealingPrice(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHealingOption(
      _token: string,
      _priceUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupportedCollection(
      collection: string,
      supported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedCollectionAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportedCollectionLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportedCollections(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { collections: string[] }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_POINT(overrides?: CallOverrides): Promise<BigNumber>;

  HP(overrides?: CallOverrides): Promise<string>;

  heal(
    collection: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  healingPriceUnit(overrides?: CallOverrides): Promise<BigNumber>;

  healingToken(overrides?: CallOverrides): Promise<string>;

  healings(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber] & {
      withdrawn: boolean;
      collection: string;
      tokenId: BigNumber;
      endTimestamp: BigNumber;
    }
  >;

  isSupportedCollection(
    nft: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nftMetadataRegistry(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  queryHealingPrice(
    collection: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHealingOption(
    _token: string,
    _priceUnit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupportedCollection(
    collection: string,
    supported: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedCollectionAt(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  supportedCollectionLength(overrides?: CallOverrides): Promise<BigNumber>;

  supportedCollections(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    HP(overrides?: CallOverrides): Promise<string>;

    heal(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    healingPriceUnit(overrides?: CallOverrides): Promise<BigNumber>;

    healingToken(overrides?: CallOverrides): Promise<string>;

    healings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber] & {
        withdrawn: boolean;
        collection: string;
        tokenId: BigNumber;
        endTimestamp: BigNumber;
      }
    >;

    isSupportedCollection(
      nft: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nftMetadataRegistry(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    queryHealingPrice(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setHealingOption(
      _token: string,
      _priceUnit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportedCollection(
      collection: string,
      supported: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedCollectionAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    supportedCollectionLength(overrides?: CallOverrides): Promise<BigNumber>;

    supportedCollections(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    BASE_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    HP(overrides?: CallOverrides): Promise<BigNumber>;

    heal(
      collection: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    healingPriceUnit(overrides?: CallOverrides): Promise<BigNumber>;

    healingToken(overrides?: CallOverrides): Promise<BigNumber>;

    healings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportedCollection(
      nft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftMetadataRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queryHealingPrice(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHealingOption(
      _token: string,
      _priceUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupportedCollection(
      collection: string,
      supported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedCollectionAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedCollectionLength(overrides?: CallOverrides): Promise<BigNumber>;

    supportedCollections(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_POINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    heal(
      collection: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    healingPriceUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    healingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    healings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportedCollection(
      nft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftMetadataRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryHealingPrice(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHealingOption(
      _token: string,
      _priceUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupportedCollection(
      collection: string,
      supported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedCollectionAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedCollectionLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedCollections(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
